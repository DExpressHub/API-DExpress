generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender1 {
  MALE
  FEMALE
}

enum DocumentType {
  IDENTITY_DOCUMENT // Documento de Identificação (BI, passaporte, etc.)
  CRIMINAL_RECORD // Registo Criminal
  TRAINING_CERTIFICATE // Certificado de Formação
  MEDICAL_CERTIFICATE // Atestado Médico
  PHOTO // Foto de Perfil
  OTHER // Outro
}

enum GeneralAvailability {
  FULL_TIME
  PART_TIME
  DAILY
  WEEKENDS
  ANY
}

enum ExperienceLevel {
  LESS_THAN_1
  ONE_TO_THREE
  THREE_TO_FIVE
  MORE_THAN_FIVE
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum UserType {
  CLIENT // Pessoa física
  COMPANY // Pessoa jurídica
}

enum JobApplicationStatus {
  PENDING
  IN_REVIEW
  INTERVIEW
  ACCEPTED
  REJECTED
}

enum MaritalStatus1 {
  SINGLE // Solteiro(a)
  MARRIED // Casado(a)
  DIVORCED // Divorciado(a)
  WIDOWED // Viúvo(a)
  SEPARATED // Separado(a)
  STABLE_UNION // União Estável
}

enum Position {
  BABYSITTER // Babá
  HOUSEKEEPER // Diarista / Empregada doméstica
  COOK // Cozinheira
  CAREGIVER // Cuidadora de idosos ou pessoas especiais
  GARDENER // Jardineiro
  IRONING // Passadeira
  CLEANING_ASSISTANT // Auxiliar de limpeza
  OTHER // Outro (cargo personalizado)
}

model JobApplication {
  id                     String               @id @default(uuid())
  locationId             String
  fullName               String
  identityNumber         String // Nº BI
  phoneNumber            String
  optionalPhoneNumber    String?
  gender                 Gender1              @default(MALE)
  email                  String
  birthDate              DateTime
  maritalStatus          MaritalStatus1
  hasChildren            Boolean
  knownDiseases          String? // Doenças
  desiredPosition        Position // Cargo
  languages              String[] // Idiomas
  availabilityDate       DateTime // Data de disponibilidade para início
  professionalExperience String // Experiência Profissional
  highestDegree          String // Grau mais elevado concluído
  courses                String[] // Cursos
  skillsAndQualities     String[] // Habilidades e Qualidades
  status                 JobApplicationStatus @default(PENDING)
  location               Location             @relation(fields: [locationId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  professional           Professional[]
}

model Professional {
  id                     String                   @id @default(uuid()) // Identificador único do profissional
  fullName               String // Nome completo do profissional
  email                  String                   @unique // Email do profissional (único)
  phoneNumber            String
  identityNumber         String? // Número de Identificação (BI, passaporte, etc.) (opcional)
  isAvailable            Boolean                  @default(false) // Indica se o profissional está disponível para ser contratado
  description            String?
  expectedAvailability   DateTime?
  hasCriminalRecord      Boolean                  @default(false) // Indica se o profissional tem registo criminal
  hasMedicalCertificate  Boolean                  @default(false) // Indica se o profissional tem atestado médico
  hasTrainingCertificate Boolean                  @default(false) // Indica se o profissional tem certificado de formação
  locationId             String
  profileImage           String?
  genderId               String
  birthDate              DateTime                 @default(now())
  hasChildren            Boolean                  @default(false)
  knownDiseases          String?
  expectedSalary         Int                      @default(0) // Pretensão salarial
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  jobApplicationId       String?                  @unique
  desiredPosition        Gender                   @relation(fields: [desiredPositionId], references: [id])
  availabilityType       GeneralAvailability
  experienceLevel        ExperienceLevel
  gender                 DesiredPosition          @relation(fields: [genderId], references: [id])
  desiredPositionId      String
  jobApplication         JobApplication?          @relation(fields: [jobApplicationId], references: [id])
  specialties            Specialty[]              @relation("ProfessionalSpecialties")
  availability           Availability[]
  location               Location                 @relation(fields: [locationId], references: [id])
  Document               Document[]
  ProfessionalExperience ProfessionalExperience[]
  // Relacionamento com Cursos (Muitos-para-Muitos)
  professionalCourses    ProfessionalCourses[]
  // Relacionamento com Idiomas (Muitos-para-Muitos)
  professionalLanguages  ProfessionalLanguages[]
  // Relacionamento com Habilidades (Muitos-para-Muitos)
  professionalSkills     ProfessionalSkills[]
  maritalStatus          MaritalStatus?           @relation(fields: [maritalStatusId], references: [id])
  maritalStatusId        String?
  highestDegree          HighestDegree?           @relation(fields: [highestDegreeId], references: [id])
  highestDegreeId        String?
}

model Gender {
  id            String         @id @default(uuid())
  name          String         @unique // Ex: MALE
  label         String
  professionals Professional[]
  AdminUser     AdminUser[]
}

model MaritalStatus {
  id            String         @id @default(uuid())
  name          String         @unique // Ex: SINGLE
  label         String // Ex: "Solteiro"
  professionals Professional[]
}

model HighestDegree {
  id            String         @id @default(uuid())
  name          String         @unique // Ex: BACHELOR
  label         String // Ex: "Graduação"
  level         Int // Para ordenação (1, 2, 3...)
  professionals Professional[]
}

model DesiredPosition {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  label         String?
  professionals Professional[]
}

// ----------------------------------------------------
// Tabela de Junção para Cursos
// ----------------------------------------------------
model Course {
  id                  String                @id @default(uuid())
  name                String                @unique // Ex: "Primeiros Socorros"
  label               String?
  // Relacionamento inverso com a tabela de junção
  professionalCourses ProfessionalCourses[]
}

//A tabela intermediária que une o Professional com o Course
model ProfessionalCourses {
  professionalId String
  courseId       String
  professional   Professional @relation(fields: [professionalId], references: [id])
  course         Course       @relation(fields: [courseId], references: [id])

  @@id([professionalId, courseId])
}

// ----------------------------------------------------
// Tabela de Junção para Idiomas
// ----------------------------------------------------
model Language {
  id    String  @id @default(uuid())
  name  String  @unique // Ex: "Português"
  label String?

  // Relacionamento inverso com a tabela de junção
  professionalLanguages ProfessionalLanguages[]
}

// A tabela intermediária que une o Professional com o Language
model ProfessionalLanguages {
  professionalId String
  languageId     String
  level          String? // Campo extra para adicionar nível (ex: 'Fluente', 'Intermediário')
  professional   Professional @relation(fields: [professionalId], references: [id])
  language       Language     @relation(fields: [languageId], references: [id])

  @@id([professionalId, languageId])
}

// ----------------------------------------------------
// Tabela de Junção para Habilidades
// ----------------------------------------------------
model Skill {
  id                 String               @id @default(uuid())
  name               String               @unique
  label              String?
  // Relacionamento inverso com a tabela de junção
  professionalSkills ProfessionalSkills[]
}

// A tabela intermediária que une o Professional com a Skill
model ProfessionalSkills {
  professionalId String
  skillId        String

  professional Professional @relation(fields: [professionalId], references: [id])
  skill        Skill        @relation(fields: [skillId], references: [id])

  @@id([professionalId, skillId])
}

model ProfessionalExperience {
  id             String       @id @default(uuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  localTrabalho  String
  cargo          String
  tempo          String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Document {
  id             String       @id @default(uuid()) // ID único do documento
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String // ID do profissional vinculado
  type           DocumentType // Tipo do documento (ex: BI, certificado, etc.)
  url            String // URL do arquivo/documento
  createdAt      DateTime     @default(now()) // Data de criação
  updatedAt      DateTime     @updatedAt // Data da última atualização
}

model Specialty {
  id            String         @id @default(uuid())
  name          String         @unique
  professionals Professional[] @relation("ProfessionalSpecialties")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Availability {
  id             String       @id @default(uuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  weekday        Weekday // ← agora usa enum
  startTime      String // e.g., "08:00"
  endTime        String // e.g., "17:00"
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Location {
  id             String           @id @default(uuid())
  city           City             @relation(fields: [cityId], references: [id])
  cityId         String
  district       District         @relation(fields: [districtId], references: [id])
  districtId     String
  street         String?
  lat            Float?
  lng            Float?
  professionals  Professional[] // One location → many professionals
  jobApplication JobApplication[] // One location → many jobApplication
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model City {
  id        String     @id @default(uuid())
  name      String     @unique
  districts District[]
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model District {
  id        String     @id @default(uuid())
  name      String
  city      City       @relation(fields: [cityId], references: [id])
  cityId    String
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([name, cityId])
}

model ClientProfile {
  id               String   @id @default(uuid())
  fullName         String
  email            String   @unique
  identityNumber   String? // Nº BI
  phoneNumber      String
  optionalContacts String[]
  address          String
  // Um ClientProfile pode ter 1 usuário (login)
  user             User?
}

// Informação da Residencia !

//Informação do Contrato terá  id residencia, id cliente perfil, id profissional !
// Assim, podemos vincular um cliente a uma residência e um profissional a uma residência
// E também vincular um cliente a um profissional, e um profissional a uma residência
// Com isso sera possivelfirmar uma contratação e saber que esta vinculado !
model CompanyProfile {
  id              String  @id @default(uuid())
  companyName     String
  nif             String
  email           String  @unique
  phoneNumber     String
  optionalContact String?
  address         String
  state           String
  //Uma CompanyProfile pode ter 1 usuário (login)
  sectorId        String
  sector          Sector @relation(fields: [sectorId], references: [id])

  user            User?
}

model Sector {
  id              String         @id @default(uuid())
  name            String     @unique
  companies       CompanyProfile[]
}
model User {
  id               String          @id @default(uuid())
  email            String          @unique
  password         String
  isActive         Boolean         @default(true)
  type             UserType        @default(CLIENT) // CLIENT ou COMPANY
  // Cada User pode estar associado a UM perfil de cliente ou UM perfil de empresa
  clientProfileId  String?         @unique
  companyProfileId String?         @unique
  avatar           String?
  clientProfile    ClientProfile?  @relation(fields: [clientProfileId], references: [id])
  companyProfile   CompanyProfile? @relation(fields: [companyProfileId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model AdminUser {
  id                   String                 @id @default(uuid())
  name                 String
  numberphone          String
  isActive             Boolean                @default(true)
  identityNumber       String                 @unique
  gender               Gender?                @relation(fields: [genderId], references: [id])
  birthDate            DateTime
  email                String                 @unique
  password             String
  avatar               String?
  role                 InternalRole
  permissions          Permission[]           @relation("AdminPermissions")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  accountSettings      AccountSettings[]
  notificationSettings NotificationSettings[]
  securitySettings     SecuritySettings[]
  genderId             String?
}

model AccountSettings {
  id        String    @id @default(uuid())
  userId    String    @unique
  status    String    @default("active")
  plan      String    @default("Free")
  visible   Boolean   @default(true)
  adminUser AdminUser @relation(fields: [userId], references: [id])
}

model SecuritySettings {
  id                 String    @id @default(uuid())
  userId             String    @unique
  loginNotifications Boolean   @default(true)
  lastPasswordChange DateTime?
  adminUser          AdminUser @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id        String    @id @default(uuid())
  userId    String    @unique
  email     Boolean   @default(true)
  push      Boolean   @default(false)
  marketing Boolean   @default(true)
  weekly    Boolean   @default(true)
  adminUser AdminUser @relation(fields: [userId], references: [id])
}

enum InternalRole {
  GENERAL_ADMIN
  OPERATIONS_MANAGER
  HR_COORDINATOR
  QUALITY_SUPERVISOR
  CUSTOMER_ASSISTANT
  FINANCIAL
  INTERNAL_AUDITOR
}

model Permission {
  id     String      @id @default(uuid())
  name   String      @unique
  admins AdminUser[] @relation("AdminPermissions")
}
