generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum JobApplicationStatus {
  PENDING        // Aguardando avaliação
  ACCEPTED       // Candidato aprovado
  REJECTED       // Candidato rejeitado
  IN_REVIEW      // Em análise
  INTERVIEW      // Agendado para entrevista
}
enum DesiredPosition {
  BABYSITTER       // Babá
  HOUSEKEEPER      // Diarista / Empregada doméstica
  COOK             // Cozinheira
  CAREGIVER        // Cuidadora de idosos ou pessoas especiais
  GARDENER         // Jardineiro
  IRONING          // Passadeira
  CLEANING_ASSISTANT // Auxiliar de limpeza
  OTHER            // Outro (cargo personalizado)
}

model JobApplication {
  id                      String   @id @default(uuid())
  locationId       String
  fullName                String
  identityNumber          String   // Nº BI
  phoneNumber             String
  optionalPhoneNumber     String?
  email                   String
  address                 String
  birthDate               DateTime
  maritalStatus           String   // Estado Civil
  hasChildren             Boolean
  knownDiseases           String?  // Doenças
  desiredPosition         String   // Cargo
  languages               String[] // Idiomas
  availabilityDate        DateTime // Data de disponibilidade para início
  professionalExperience  String   // Experiência Profissional
  highestDegree           String   // Grau mais elevado concluído
  courses                 String[] // Cursos
  skillsAndQualities      String []  // Habilidades e Qualidades
  status                  JobApplicationStatus @default(PENDING)
  location               Location            @relation(fields: [locationId], references: [id])
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}


model Professional {
  id                   String              @id @default(uuid()) // Identificador único do profissional
  fullName             String                                 // Nome completo do profissional
  email                String              @unique             // Email do profissional (único)
  phoneNumber          String                                 // Número de telefone
  isAvailable          Boolean             @default(false)     // Indica se o profissional está disponível para ser contratado
  availabilityType     GeneralAvailability                     // Tipo de disponibilidade geral (tempo integral, parcial, etc.)
  experienceLevel      ExperienceLevel                         // Nível de experiência do profissional
  specialties          Specialty[]         @relation("ProfessionalSpecialties") // Especialidades atribuídas ao profissional
  availability         Availability[]                          // Dias e horários disponíveis do profissional
  location             Location            @relation(fields: [locationId], references: [id]) // Localização atual
  locationId           String                                 // ID da localização
  birthDate            DateTime                               // Data de nascimento
  maritalStatus        String                                 // Estado civil (ex: solteiro, casado)
  hasChildren          Boolean                                // Indica se o profissional tem filhos
  knownDiseases        String?                                // Informações sobre doenças conhecidas (opcional)
  desiredPosition      DesiredPosition                                 // Cargo desejado (ex: babá, diarista)
  expectedSalary       Int                                    // Pretensão salarial
  highestDegree        String                                 // Grau acadêmico mais elevado concluído
  courses              String[]                               // Cursos realizados (ex: primeiros socorros, culinária)
  languages            String[]                               // Idiomas que o profissional fala
  skillsAndQualities   String[]                               // Habilidades e qualidades (ex: pontual, cuidadosa)

  createdAt            DateTime            @default(now())    // Data de criação do registro
  updatedAt            DateTime            @updatedAt         // Data da última atualização do registro
}


model Specialty {
  id            String         @id @default(uuid())
  name          String         @unique
  professionals Professional[] @relation("ProfessionalSpecialties")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}


model Availability {
  id             String       @id @default(uuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  weekday        Weekday // ← agora usa enum
  startTime      String // e.g., "08:00"
  endTime        String // e.g., "17:00"
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Location {
  id             String          @id @default(uuid())
  city           City            @relation(fields: [cityId], references: [id])
  cityId         String
  district       District        @relation(fields: [districtId], references: [id])
  districtId     String
  street         String?
  professionals  Professional[]  // One location → many professionals
  jobApplication  JobApplication[]  // One location → many jobApplication
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model City {
  id        String     @id @default(uuid())
  name      String     @unique
  districts District[]
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model District {
  id        String     @id @default(uuid())
  name      String
  city      City       @relation(fields: [cityId], references: [id])
  cityId    String
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  @@unique([name, cityId]) 
}

 enum GeneralAvailability {
  FULL_TIME
  PART_TIME
  DAILY
  WEEKENDS
  ANY
}

enum ExperienceLevel {
  LESS_THAN_1
  ONE_TO_THREE
  THREE_TO_FIVE
  MORE_THAN_FIVE
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
